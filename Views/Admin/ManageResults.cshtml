@model List<TorneioTenisMesa.Models.ViewModels.GameResultViewModel>
@{
    ViewData["Title"] = "Gerenciar Resultados";
    var tournamentId = Model.FirstOrDefault()?.TournamentId ?? 0;
}

<h2>Gerenciar Resultados</h2>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

@if (TempData["NewUserCredentials"] is Dictionary<string, string> credentials && credentials.Any())
{
    <div id="popup" class="modal d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Novas Credenciais Criadas</h5>
                    <button type="button" class="btn-close" onclick="closePopup()"></button>
                </div>
                <div class="modal-body">
                    <table class="table">
                        <thead><tr><th>Email</th><th>Senha</th></tr></thead>
                        <tbody>
                            @foreach (var item in credentials)
                            {
                                <tr><td>@item.Key</td><td>@item.Value</td></tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" onclick="exportToCsv()">Exportar CSV</button>
                    <button class="btn btn-secondary" onclick="closePopup()">Fechar</button>
                </div>
            </div>
        </div>
    </div>
}

<form method="post" asp-action="SaveResults">
    <input type="hidden" name="tournamentId" value="@tournamentId" />

    <div class="mb-3">
        <label>Grupo:</label>
        <select id="groupFilter" class="form-select" onchange="applyfilters()">
            <option value="">Todos</option>
            @foreach (var group in Model.Select(m => m.Group).Distinct())
            {
                <option value="@group">@group</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Jogador 1:</label>
        <select id="player1Filter" class="form-select" onchange="applyfilters()">
            <option value="">Todos</option>
            @foreach (var p1 in Model.Select(m => m.Player1Name).Distinct())
            {
                <option value="@p1">@p1</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label>Advers치rio:</label>
        <select id="player2Filter" class="form-select" onchange="applyfilters()">
            <option value="">Todos</option>
        </select>
    </div>

    <div class="form-check mb-3">
        <input class="form-check-input" type="checkbox" id="noResultsOnly" onchange="applyfilters()" />
        <label class="form-check-label" for="noResultsOnly">
            Somente jogos sem resultados
        </label>
    </div>

    <div id="resultsSection" style="display:none">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Grupo</th>
                    <th>Jogador 1</th>
                    <th>Pontos</th>
                    <th>Jogador 2</th>
                    <th>Pontos</th>
                    <th>Data</th>
                </tr>
            </thead>
            <tbody id="resultsTableBody">
                @for (int i = 0; i < Model.Count; i++)
                {
                    <tr data-group="@Model[i].Group"
                        data-p1="@Model[i].Player1Name"
                        data-p2="@Model[i].Player2Name"
                        data-empty="@((Model[i].ScorePlayer1 == 0 && Model[i].ScorePlayer2 == 0).ToString().ToLower())">
                        <td>@Model[i].Group</td>
                        <td>@Model[i].Player1Name</td>
                        <td>
                            <input type="number" name="results[@i].ScorePlayer1" class="form-control" value="@Model[i].ScorePlayer1" min="0" />
                        </td>
                        <td>@Model[i].Player2Name</td>
                        <td>
                            <input type="number" name="results[@i].ScorePlayer2" class="form-control" value="@Model[i].ScorePlayer2" min="0" />
                        </td>
                        <td>@Model[i].Date.ToString("dd/MM/yyyy")</td>
                        <input type="hidden" name="results[@i].GameId" value="@Model[i].GameId" />
                        <input type="hidden" name="results[@i].TournamentId" value="@tournamentId" />
                    </tr>
                }
            </tbody>
        </table>

        <button type="submit" name="action" value="save" class="btn btn-success">
            Salvar Resultados
        </button>
        <button type="submit" name="action" value="finalizar" class="btn btn-danger ms-auto">
            Finalizar Torneio
        </button>
    </div>
</form>

@section Scripts {
    <script>
        const allRows = [...document.querySelectorAll("#resultsTableBody tr")];

        function applyFilters() {
            const group = document.getElementById("groupFilter").value;
            const p1 = document.getElementById("player1Filter").value;
            const p2 = document.getElementById("player2Filter").value;
            const noResults = document.getElementById("noResultsOnly").checked;

            let anyVisible = false;

            allRows.forEach(row => {
                const player1 = row.dataset.p1;
                const player2 = row.dataset.p2;
                const matchGroup = row.dataset.group === group || !group;
                const isEmpty = row.dataset.empty === "true";
                const matchEmpty = !noResults || isEmpty;

                // Nova l칩gica para verificar os jogadores
                const matchPlayer1Only = p1 && !p2 && (player1 === p1 || player2 === p1);
                const matchPlayer2Only = !p1 && p2 && (player1 === p2 || player2 === p2);
                const matchBothPlayers = p1 && p2 && (
                    (player1 === p1 && player2 === p2) ||
                    (player1 === p2 && player2 === p1)
                );
                const matchNoPlayers = !p1 && !p2;

                const matchPlayers = matchNoPlayers || matchPlayer1Only || matchPlayer2Only || matchBothPlayers;

                const visible = matchGroup && matchPlayers && matchEmpty;
                row.style.display = visible ? "" : "none";
                if (visible) anyVisible = true;
            });

            document.getElementById("resultsSection").style.display = anyVisible ? "block" : "none";

            // Preenche advers치rios com base em qualquer jogador
            const p2Select = document.getElementById("player2Filter");
            p2Select.innerHTML = '<option value="">Todos</option>';

            const opponents = new Set();

            allRows.forEach(row => {
                const pl1 = row.dataset.p1;
                const pl2 = row.dataset.p2;

                if (!p1 || pl1 === p1 || pl2 === p1) {
                    if (pl1 && pl1 !== p1) opponents.add(pl1);
                    if (pl2 && pl2 !== p1) opponents.add(pl2);
                }
            });

            opponents.forEach(op => {
                p2Select.innerHTML += `<option value="${op}">${op}</option>`;
            });
        }

        function closePopup() {
            document.getElementById("popup").classList.remove("d-block");
            document.getElementById("popup").style.display = "none";
        }

        function exportToCsv() {
            let csv = "Email,Senha\n";
            document.querySelectorAll("#popup table tbody tr").forEach(row => {
                const cols = row.querySelectorAll("td");
                csv += `${cols[0].innerText},${cols[1].innerText}\n`;
            });

            const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "credenciais.csv";
            link.click();
        }

        // Aplica os eventos automaticamente ao carregar a p치gina
        window.onload = function () {
            document.getElementById("groupFilter").addEventListener("change", applyFilters);
            document.getElementById("player1Filter").addEventListener("change", applyFilters);
            document.getElementById("player2Filter").addEventListener("change", applyFilters);
            document.getElementById("noResultsOnly").addEventListener("change", applyFilters);

            applyFilters(); // Aplica os filtros inicialmente
        };
    </script>
}
